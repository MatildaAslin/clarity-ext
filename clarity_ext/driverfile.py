import os
from genologics.lims import Lims
from genologics.config import BASEURI, USERNAME, PASSWORD
from genologics.entities import *
from domain import Plate
import importlib
from utils import lazyprop


# The object accessible during execution of the driver file script:
# Contains things like the current plate.
# The underlying connection objects etc. can be accessed through "advanced"
class DriverFileContext:
    def __init__(self, current_step, advanced, logger=None):
        self.current_step = current_step
        self.advanced = advanced
        self.logger = logger or logging.getLogger(__name__)
        self.outfile = GeneratedFile()

    @lazyprop
    def plate(self):
        self.logger.debug("Getting current plate (lazy property)")
        # TODO: Assumes 96 well plate!
        plate = Plate()
        for input, output in self.current_step.input_output_maps:
            if output['output-generation-type'] == "PerInput":
                # Process
                artifact = output['uri']
                location = artifact.location
                # container = location[0].id
                well = location[1]
                plate.set_well(well, artifact.name)
        return plate


class GeneratedFile:
    """Metadata for the file generated by the script"""

    def __init__(self):
        self.name = None
        self.buffer = []

    def write(self, str):
        self.buffer.append(str)

    def write_line(self, str):
        self.buffer.append(str + "\n")

    def _save(self, path):
        if not os.path.exists(path):
            os.makedirs(path)
        full_path = os.path.join(path, self.name)
        with open(full_path, 'w') as f:
            for line in self.buffer:
                f.write(line)


class DriverFileService:
    def __init__(self, process_id, script_module, result_path, logger=None):
        self.logger = logger or logging.getLogger(__name__)
        self.logger.info("Generating driverfile using script module '{}'".format(script_module))
        self.script_module = script_module
        self.process_id = process_id
        self.result_path = result_path
        self.lims = Lims(BASEURI, USERNAME, PASSWORD)
        self.lims.check_version()
        self.current_step = Process(self.lims, id=self.process_id)
        self.logger.info("Got the process step: {}".format(self.current_step))

    def execute(self, commit=False):
        """

        :param commit: Set to True to write back to the LIMS. Set to False while testing. Then the results of the
        changes will be written to stdout
        :return:
        """
        print "HERE!", self.script_module
        context = DriverFileContext(self.current_step, self)
        module = importlib.import_module(self.script_module)
        extension = getattr(module, "Extension")
        instance = extension(context)
        self.logger.debug("Successfully created an extension instance. Executing the create method.")
        instance.create()
        self.logger.debug("The script has been executed. Saving the file output file")
        context.outfile._save(self.result_path)
        # TODO: Upload to the LIMS
