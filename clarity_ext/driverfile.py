import logging
from genologics.lims import Lims
from genologics.config import BASEURI, USERNAME, PASSWORD
from genologics.entities import *
from genologics.epp import attach_file, EppLogger
from domain import Plate
from utils import lazyprop


# The object accessible during execution of the driver file script:
# Contains things like the current plate.
# The underlying connection objects etc. can be accessed through "advanced"
class DriverFileContext:
    def __init__(self, current_step, advanced, logger=None):
        self.current_step = current_step
        self.advanced = advanced
        self.logger = logger or logging.getLogger(__name__)
        self.outfile = GeneratedFile()

    @lazyprop
    def plate(self):
        self.logger.debug("Getting current plate (lazy property)")
        # TODO: Assumes 96 well plate!
        plate = Plate()
        for input, output in self.current_step.input_output_maps:
            if output['output-generation-type'] == "PerInput":
                # Process
                artifact = output['uri']
                location = artifact.location
                # container = location[0].id
                well = location[1]
                plate.set_well(well, artifact.name)
        return plate


class GeneratedFile:
    """Metadata for the file generated by the script"""

    def __init__(self):
        self.name = None
        self.buffer = []

    def write(self, str):
        self.buffer.append(str)

    def write_line(self, str):
        self.buffer.append(str + "\n")

    def _save(self):
        with open(self.name, 'w') as f:
            for line in self.buffer:
                f.write(line)


class DriverFileService:
    def __init__(self, process_id, path, logger=None):
        self.logger = logger or logging.getLogger(__name__)
        self.process_id = process_id
        self.path = path
        self.logger.info("Generating driverfile using script at {}".format(path))
        self.lims = Lims(BASEURI, USERNAME, PASSWORD)
        self.lims.check_version()
        self.current_step = Process(self.lims, id=self.process_id)
        self.logger.info("Got the process step: {}".format(self.current_step))

    def execute(self):
        # Compile the user script:
        with open(self.path, 'r') as f:
            code_str = f.read()
            context = DriverFileContext(self.current_step, self)
            compiled = compile(code_str, self.path, 'exec')
            exec compiled
            self.logger.info("Successfully compiled the script")
            context.outfile._save()
            self.logger.info("Output file has been saved")

